/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vista;

import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author digim
 */
public class Mascotas_Adoptadas extends javax.swing.JFrame {


    public Mascotas_Adoptadas() {
        setTitle("GESTIONAR MASCOTAS ADOPTADAS");
        setResizable(false);
        initComponents();
        this.setLocationRelativeTo(null);
        
        Login login = new Login();
        txtUsuario.setText(login.TipoUsuario);
        cargarDatosTabla(); // Llamamos al método para cargar datos de la API en la tabla
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setIconImage(new ImageIcon("src/Img/Icono.png").getImage());
        cargarEstadosEnComboBox(ComboBoxEsMa);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        BTEliminarMasAdop = new javax.swing.JButton();
        txtUsuario = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablaMascotasAdoptadas = new javax.swing.JTable();
        BTModificarMasAdop = new javax.swing.JButton();
        BTVolver = new javax.swing.JButton();
        txtNombreMascota = new javax.swing.JTextField();
        BTSeleccionarMasAdop = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ComboBoxEsMa = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(94, 114, 228));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("Bienvenido:");

        BTEliminarMasAdop.setText("Eliminar Mascota Adoptada");
        BTEliminarMasAdop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTEliminarMasAdopActionPerformed(evt);
            }
        });

        txtUsuario.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        txtUsuario.setText("@NOMBRE ADMIN o Usuario");

        TablaMascotasAdoptadas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nombre Mascota", "Dueño", "Estado Mascota", "Raza", "Tipo"
            }
        ));
        jScrollPane2.setViewportView(TablaMascotasAdoptadas);

        BTModificarMasAdop.setText("Modificar Mascota Adoptada");
        BTModificarMasAdop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTModificarMasAdopActionPerformed(evt);
            }
        });

        BTVolver.setText("Volver");
        BTVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTVolverActionPerformed(evt);
            }
        });

        BTSeleccionarMasAdop.setText("Seleccionar Mascota Adoptada");
        BTSeleccionarMasAdop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTSeleccionarMasAdopActionPerformed(evt);
            }
        });

        jLabel2.setText("Nombre Mascota");

        jLabel4.setText("Estado Mascota");

        ComboBoxEsMa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxEsMaActionPerformed(evt);
            }
        });

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/logo.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(50, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtNombreMascota, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                    .addComponent(ComboBoxEsMa, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(30, 30, 30))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(BTEliminarMasAdop, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(BTModificarMasAdop, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(51, 51, 51))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BTVolver)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(77, 77, 77)
                                .addComponent(BTSeleccionarMasAdop)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtUsuario)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(BTVolver)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtUsuario))
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(33, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(BTSeleccionarMasAdop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNombreMascota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(ComboBoxEsMa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(52, 52, 52)
                        .addComponent(BTModificarMasAdop, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64)
                        .addComponent(BTEliminarMasAdop, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(85, 85, 85))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BTVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTVolverActionPerformed
            Menu_Admin Menu_a = new Menu_Admin();
            Menu_a.setVisible(true);
            this.dispose();
    }//GEN-LAST:event_BTVolverActionPerformed

    private void BTModificarMasAdopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTModificarMasAdopActionPerformed
     manejarModificacionMascota();
    }//GEN-LAST:event_BTModificarMasAdopActionPerformed

    private void BTEliminarMasAdopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTEliminarMasAdopActionPerformed
     manejarEliminacionMascota();
    }//GEN-LAST:event_BTEliminarMasAdopActionPerformed

    private void BTSeleccionarMasAdopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTSeleccionarMasAdopActionPerformed
     manejarSeleccionMascota(); // Llama al método para manejar la selección del usuario
    }//GEN-LAST:event_BTSeleccionarMasAdopActionPerformed

    private void ComboBoxEsMaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxEsMaActionPerformed
     
    }//GEN-LAST:event_ComboBoxEsMaActionPerformed
  
private String token = "8ffeb3f8e3edc9915795f7c57fb11b39b1dd96a2";
private String token2 = "a635c77de3de8cf58fa3e631b4e197b048670150";
private Map<Integer, String> estadosMap = new HashMap<>();

//--------------------------------------------------------INICIO LISTAR DATOS-------------------------------------------------------------------------
private void cargarDatosTabla() {
    String mascotasUrl = "http://127.0.0.1:8000/api/mascota/?format=json";
    String usuariosUrl = "http://127.0.0.1:8000/api/perfilusuario/?format=json";
    String razasUrl = "http://127.0.0.1:8000/api/razas/?format=json";
    String tipoMascotaUrl = "http://127.0.0.1:8000/api/tipomascota/?format=json";
    String estadosUrl = "http://127.0.0.1:8000/api/estadomascota/?format=json"; // Nueva API para estados

    DefaultTableModel model = (DefaultTableModel) TablaMascotasAdoptadas.getModel();
    model.setRowCount(0);

    try {
        // Obtener datos de mascotas
        JSONArray mascotasArray = obtenerDatosDeApi(mascotasUrl);

        // Obtener y procesar datos de usuarios
        JSONArray usuariosArray = obtenerDatosDeApi(usuariosUrl);
        Map<Integer, String> usuariosMap = procesarUsuarios(usuariosArray);

        // Obtener y procesar datos de razas
        JSONArray razasArray = obtenerDatosDeApi(razasUrl);
        Map<Integer, String> razasMap = procesarRazas(razasArray);

        // Obtener y procesar datos de tipos de mascota
        JSONArray tipoMascotaArray = obtenerDatosDeApi(tipoMascotaUrl);
        Map<Integer, String> tipoMascotaMap = procesarTipoMascota(tipoMascotaArray);

        // Obtener y procesar datos de estados
        JSONArray estadosArray = obtenerDatosDeApi(estadosUrl);
        estadosMap = procesarEstados(estadosArray);  // Aquí actualizamos estadosMap

        // Procesar datos de mascotas
        for (int i = 0; i < mascotasArray.length(); i++) {
            JSONObject mascota = mascotasArray.getJSONObject(i);

            int idMascota = mascota.getInt("id");
            String nombreMascota = mascota.optString("nombre", "N/A");

            // Obtener la información del usuario (el objeto 'usuario' dentro de 'mascota')
            JSONObject usuario = mascota.optJSONObject("usuario");
            int idUsuario = usuario != null ? usuario.optInt("id", -1) : -1;  // Extraemos el 'id' del usuario

            // Obtener el nombre completo del usuario usando el mapa de usuarios
            String nombreUsuario = usuariosMap.getOrDefault(idUsuario, "N/A");

            // Obtener el estado de la mascota
            JSONObject estadoMascota = mascota.optJSONObject("estado_mascota");
            String estado = estadoMascota != null ? estadosMap.getOrDefault(estadoMascota.optInt("id", -1), "N/A") : "N/A";

            // Obtener la raza de la mascota (ahora usamos el nombre de la raza)
            JSONObject razaMascota = mascota.optJSONObject("raza");
            String raza = razaMascota != null ? razasMap.getOrDefault(razaMascota.optInt("id", -1), "N/A") : "N/A";

            // Obtener el tipo de la mascota
            JSONObject tipoMascota = mascota.optJSONObject("tipo");
            String tipo = tipoMascota != null ? tipoMascota.optString("descripcion", "N/A") : "N/A";

            if (estado.equals("adoptado")) {
                model.addRow(new Object[]{idMascota, nombreMascota, nombreUsuario, estado, raza, tipo});
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al cargar datos de las APIs.");
    }
}



// Método para obtener datos de la API
private JSONArray obtenerDatosDeApi(String urlString) throws IOException, JSONException {
    URL url = new URL(urlString);
    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
    connection.setRequestMethod("GET");
    //connection.setRequestProperty("Authorization", "Token " + token);
    connection.setRequestProperty("Authorization", "Token " + token2);
    connection.connect();

    int responseCode = connection.getResponseCode();
    if (responseCode == HttpURLConnection.HTTP_OK) {
        BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        StringBuilder response = new StringBuilder();
        String inputLine;
        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
        }
        in.close();
        return new JSONArray(response.toString());
    } else {
        throw new IOException("Error en la conexión. Código de respuesta: " + responseCode);
    }
}

private Map<Integer, String> procesarUsuarios(JSONArray usuariosArray) {
    Map<Integer, String> usuariosMap = new HashMap<>();
    try {
        // Recorrer todos los usuarios en el JSONArray
        for (int i = 0; i < usuariosArray.length(); i++) {
            JSONObject usuario = usuariosArray.getJSONObject(i);

            int id = usuario.optInt("id", -1);
            JSONObject usuarioDjango = usuario.optJSONObject("usuario_django");

            String username = usuarioDjango != null ? usuarioDjango.optString("username", "N/A") : "N/A";

            // Almacenar en el mapa
            usuariosMap.put(id, username);
        }
    } catch (JSONException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al procesar datos del JSONArray.");
    }
    return usuariosMap;
}

private Map<Integer, String> procesarRazas(JSONArray razasArray) {
    Map<Integer, String> razasMap = new HashMap<>();
    try {
        // Recorrer todas las razas en el JSONArray
        for (int i = 0; i < razasArray.length(); i++) {
            JSONObject raza = razasArray.getJSONObject(i);
            int id = raza.optInt("id", -1);
            String nombre = raza.optString("nombre", "N/A");  // Cambié 'descripcion' por 'nombre'

            // Almacenar en el mapa
            razasMap.put(id, nombre);
        }
    } catch (JSONException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al procesar datos de razas.");
    }
    return razasMap;
}

private Map<Integer, String> procesarTipoMascota(JSONArray tipoMascotaArray) {
    Map<Integer, String> tipoMascotaMap = new HashMap<>();
    try {
        // Recorrer todos los tipos de mascota en el JSONArray
        for (int i = 0; i < tipoMascotaArray.length(); i++) {
            JSONObject tipo = tipoMascotaArray.getJSONObject(i);
            int id = tipo.optInt("id", -1);
            String descripcion = tipo.optString("descripcion", "N/A");

            // Almacenar en el mapa
            tipoMascotaMap.put(id, descripcion);
        }
    } catch (JSONException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al procesar datos de tipo de mascota.");
    }
    return tipoMascotaMap;
}


private void cargarEstadosEnComboBox(JComboBox<String> ComboBoxEsMa) {
    String estadosUrl = "http://127.0.0.1:8000/api/estadomascota/?format=json";
    
    try {
        // Obtener datos de estados desde la API
        JSONArray estadosArray = obtenerDatosDeApi(estadosUrl);

        // Vaciar el ComboBox antes de llenarlo
        ComboBoxEsMa.removeAllItems();

        // Llenar el ComboBox con los nombres de los estados
        for (int i = 0; i < estadosArray.length(); i++) {
            JSONObject estado = estadosArray.getJSONObject(i);
            String descripcion = estado.optString("descripcion", "N/A");
            ComboBoxEsMa.addItem(descripcion);  // Agregar cada estado al ComboBox
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al cargar los estados en el ComboBox.");
    }
}


private Map<Integer, String> procesarEstados(JSONArray estadosArray) {
    Map<Integer, String> estadosMap = new HashMap<>();
    try {
        // Recorrer todos los estados en el JSONArray
        for (int i = 0; i < estadosArray.length(); i++) {
            JSONObject estado = estadosArray.getJSONObject(i);
            int id = estado.optInt("id", -1);
            String descripcion = estado.optString("descripcion", "N/A");

            // Almacenar en el mapa
            estadosMap.put(id, descripcion);
        }
    } catch (JSONException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al procesar datos de estados.");
    }
    return estadosMap;
}


//-------------------------------------------------------FIN LISTAR DATOS---------------------------------------------------------------------

//-------------------------------------------------------INICIO ELIMINAR MASCOTA ADOPTADA-----------------------------------------------------
// Método para eliminar una mascota a través de la API
private void eliminarMascota(int mascotaId) {
    String urlString = "http://127.0.0.1:8000/api/mascota/" + mascotaId + "/"; // URL de la API para eliminar

    try {
        // Crear la URL y la conexión
        URL url = new URL(urlString);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();

        // Configurar el método DELETE y los encabezados
        connection.setRequestMethod("DELETE");
        //connection.setRequestProperty("Authorization", "Token " + token);  // Token de autenticación
        connection.setRequestProperty("Authorization", "Token " + token2);
        connection.setRequestProperty("Accept", "application/json");

        // Conectar y obtener la respuesta
        connection.connect();
        int responseCode = connection.getResponseCode();
        if (responseCode == HttpURLConnection.HTTP_NO_CONTENT) {
            JOptionPane.showMessageDialog(null, "Mascota eliminada correctamente.");
            // Aquí puedes actualizar la tabla o hacer otras acciones
        } else {
            JOptionPane.showMessageDialog(null, "Error al eliminar mascota. Código de respuesta: " + responseCode);
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al eliminar mascota.");
    }
}

// Método común para manejar la eliminación de la mascota
private void manejarEliminacionMascota() {
    // Obtener la fila seleccionada
    int filaSeleccionada = TablaMascotasAdoptadas.getSelectedRow();

    if (filaSeleccionada != -1) {
        // Obtener el ID de la mascota en la primera columna (suponiendo que el ID está en la columna 0)
        int mascotaId = (int) TablaMascotasAdoptadas.getValueAt(filaSeleccionada, 0);

        // Mostrar un cuadro de confirmación para eliminar la mascota
        int confirmacion = JOptionPane.showConfirmDialog(null, 
            "¿Está seguro de que desea eliminar esta mascota?", 
            "Confirmar eliminación", 
            JOptionPane.YES_NO_OPTION);

        if (confirmacion == JOptionPane.YES_OPTION) {
            eliminarMascota(mascotaId); // Llamar al método de eliminación
            cargarDatosTabla();  // Método para recargar la tabla si es necesario
        }
    } else {
        JOptionPane.showMessageDialog(null, "Por favor, seleccione una mascota de la tabla.");
    }
}

// Método para agregar el listener al hacer clic en la fila de la tabla
private void agregarListenerTabla() {
    TablaMascotasAdoptadas.addMouseListener(new MouseAdapter() {
        public void mouseClicked(MouseEvent e) {
            manejarEliminacionMascota(); // Llamar al método común
        }
    });
}

//-------------------------------------------------------FIN ELIMINAR MASCOTA ADOPTADA--------------------------------------------------------

//-----------------------------------------------------INICIO MODIFICAR MASCOTA ADOPTADA---------------------------------------------------

// Método para modificar el nombre de la mascota utilizando los datos seleccionados
private void modificarNombreMascotaSeleccionada(int mascotaId) {
    // Obtener el nuevo nombre de la mascota desde el campo de texto
    String nuevoNombre = txtNombreMascota.getText();

    // URL para actualizar el nombre de la mascota
    String urlMascota = "http://127.0.0.1:8000/mascotas/" + mascotaId + "/";

    // Crear el JSON para la actualización
    JSONObject datosActualizados = new JSONObject();
    datosActualizados.put("nombre", nuevoNombre);

    // Imprimir por consola cómo quedarán los datos antes de enviarlos
    System.out.println("Datos a enviar para modificar el nombre de la mascota:");
    System.out.println(datosActualizados.toString(4));  // Usar el formato 'pretty print' con 4 espacios de indentación

    // Realizar la actualización
    try {
        HttpURLConnection connection = (HttpURLConnection) new URL(urlMascota).openConnection();
        connection.setRequestMethod("PUT");
        //connection.setRequestProperty("Authorization", "Token " + token);
        connection.setRequestProperty("Authorization", "Token " + token2);
        connection.setRequestProperty("Content-Type", "application/json");
        connection.setRequestProperty("Accept", "application/json");
        connection.setDoOutput(true);

        // Enviar los datos
        try (OutputStream os = connection.getOutputStream()) {
            byte[] input = datosActualizados.toString().getBytes("utf-8");
            os.write(input, 0, input.length);
        }

        // Obtener el código de respuesta y verificar la respuesta
        int responseCode = connection.getResponseCode();
        System.out.println("Código de respuesta HTTP: " + responseCode);

        // Leer la respuesta
        StringBuilder responseMessage = new StringBuilder();
        try (BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                responseMessage.append(inputLine);
            }
        }

        // Imprimir el cuerpo de la respuesta para ver detalles
        System.out.println("Respuesta de la API: " + responseMessage.toString());

        // Verificar si la respuesta es exitosa
        if (responseCode == HttpURLConnection.HTTP_OK) {
            System.out.println("Nombre de la mascota modificado correctamente.");
            JOptionPane.showMessageDialog(null, "Nombre de la mascota modificado correctamente.");
            cargarDatosTabla();  // Recargar la tabla para reflejar los cambios
        } else {
            System.err.println("Error al modificar nombre de la mascota. Código de respuesta: " + responseCode);
            JOptionPane.showMessageDialog(null, "Error al modificar nombre de la mascota.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al modificar nombre de la mascota.");
    }
}

// Método para obtener el ID del estado a partir de la descripción
private int obtenerIdEstadoDesdeDescripcion(String descripcionEstado) {
    // Realizar la búsqueda en el mapa de estados (debe estar cargado previamente)
    for (Map.Entry<Integer, String> entry : estadosMap.entrySet()) {
        if (entry.getValue().equals(descripcionEstado)) {
            return entry.getKey();
        }
    }
    return -1;  // Retorna -1 si no se encuentra el estado
}


// Método para modificar el estado de la mascota utilizando los datos seleccionados
private void modificarEstadoMascotaSeleccionada(int mascotaId) {
    // Obtener el estado seleccionado en el ComboBox
    String estadoSeleccionado = (String) ComboBoxEsMa.getSelectedItem();
    int estadoId = obtenerIdEstadoDesdeDescripcion(estadoSeleccionado);  // Método para obtener el ID del estado seleccionado

    if (estadoId == -1) {
        JOptionPane.showMessageDialog(null, "Estado seleccionado no válido.");
        return;
    }

    // URL para actualizar solo el estado de la mascota
    String urlEstadoMascota = "http://127.0.0.1:8000/mascotas/" + mascotaId + "/estado/";

    // Crear el JSON para la actualización
    JSONObject datosActualizados = new JSONObject();
    datosActualizados.put("estado_mascota", estadoId);  // Enviar solo el ID del estado

    // Imprimir por consola cómo quedarán los datos antes de enviarlos
    System.out.println("Datos a enviar para modificar el estado de la mascota:");
    System.out.println(datosActualizados.toString(4));  // Usar el formato 'pretty print' con 4 espacios de indentación

    // Realizar la actualización
    try {
        HttpURLConnection connection = (HttpURLConnection) new URL(urlEstadoMascota).openConnection();
        connection.setRequestMethod("PUT");
        //connection.setRequestProperty("Authorization", "Token " + token);
        connection.setRequestProperty("Authorization", "Token " + token2);
        connection.setRequestProperty("Content-Type", "application/json");
        connection.setRequestProperty("Accept", "application/json");
        connection.setDoOutput(true);

        // Enviar los datos
        try (OutputStream os = connection.getOutputStream()) {
            byte[] input = datosActualizados.toString().getBytes("utf-8");
            os.write(input, 0, input.length);
        }

        // Obtener el código de respuesta y verificar la respuesta
        int responseCode = connection.getResponseCode();
        System.out.println("Código de respuesta HTTP: " + responseCode);

        // Leer la respuesta
        StringBuilder responseMessage = new StringBuilder();
        try (BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                responseMessage.append(inputLine);
            }
        }

        // Imprimir el cuerpo de la respuesta para ver detalles
        System.out.println("Respuesta de la API: " + responseMessage.toString());

        // Verificar si la respuesta es exitosa
        if (responseCode == HttpURLConnection.HTTP_OK) {
            System.out.println("Estado de la mascota modificado correctamente.");
            JOptionPane.showMessageDialog(null, "Estado de la mascota modificado correctamente.");
            cargarDatosTabla();  // Recargar la tabla para reflejar los cambios
        } else {
            System.err.println("Error al modificar estado de la mascota. Código de respuesta: " + responseCode);
            JOptionPane.showMessageDialog(null, "Error al modificar estado de la mascota.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al modificar estado de la mascota.");
    }
}


// Método para manejar la modificación de la mascota desde la tabla
private void manejarModificacionMascota() {
    // Obtener la fila seleccionada de la tabla
    int filaSeleccionada = TablaMascotasAdoptadas.getSelectedRow();

    if (filaSeleccionada != -1) {
        // Obtener el ID de la mascota desde la tabla
        int mascotaId = (int) TablaMascotasAdoptadas.getValueAt(filaSeleccionada, 0);

        // Confirmación de modificación
        int confirmacion = JOptionPane.showConfirmDialog(
            null,
            "¿Está seguro de que desea modificar esta mascota?",
            "Confirmar modificación",
            JOptionPane.YES_NO_OPTION
        );

        if (confirmacion == JOptionPane.YES_OPTION) {
            // Llamar al método para modificar la mascota usando los datos de la interfaz
            modificarNombreMascotaSeleccionada(mascotaId);
            modificarEstadoMascotaSeleccionada(mascotaId);
        }
    } else {
        JOptionPane.showMessageDialog(null, "Por favor, seleccione una mascota de la tabla.");
    }
}



//-----------------------------------------------------FIN MODIFICAR MASCOTA ADOPTADA---------------------------------------------------




//--------------------------------------------------------INICIO SELECCION MASCOTA ADOPTADA-------------------------------------------------------------
// Método para seleccionar una mascota y cargar sus datos desde la API
private void seleccionarMascota(int mascotaId) {
    String urlMascota = "http://127.0.0.1:8000/api/mascota/" + mascotaId + "/"; // URL de la API para obtener datos de la mascota
    String urlEstados = "http://127.0.0.1:8000/api/estadomascota/?format=json"; // URL para obtener estados de mascota

    try {
        // Obtener los datos de la mascota
        JSONObject jsonResponse = obtenerObjetoDeApi(urlMascota);

        // Obtener el estado actual de la mascota como objeto JSON
        String estadoMascota = "N/A";
        JSONObject estadoMascotaObj = jsonResponse.optJSONObject("estado_mascota");
        if (estadoMascotaObj != null) {
            estadoMascota = estadoMascotaObj.optString("descripcion", "N/A");
        }

        // Cargar el estado actual en el ComboBox
        cargarEstadosMascota(urlEstados, estadoMascota);

        // Filtrar solo si el estado de la mascota es "adoptado"
        if (estadoMascota.equals("adoptado")) {
            // Obtener los datos básicos de la mascota
            String nombreMascota = jsonResponse.optString("nombre", "N/A");

            // Mostrar los datos en los campos correspondientes
            txtNombreMascota.setText(nombreMascota);

        } else {
            JOptionPane.showMessageDialog(null, "La mascota seleccionada no está adoptada.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al seleccionar mascota.");
    }
}

// Método para cargar los estados en el ComboBox
private void cargarEstadosMascota(String urlEstados, String estadoActual) {
    try {
        // Obtener los estados desde la API
        JSONArray estadosArray = obtenerDatosDeApi(urlEstados);

        // Limpiar el ComboBox antes de agregar los estados
        ComboBoxEsMa.removeAllItems();

        // Agregar los estados al ComboBox
        for (int i = 0; i < estadosArray.length(); i++) {
            JSONObject estado = estadosArray.getJSONObject(i);
            String descripcion = estado.optString("descripcion", "N/A");

            ComboBoxEsMa.addItem(descripcion);

            // Si el estado es el actual, seleccionarlo
            if (descripcion.equals(estadoActual)) {
                ComboBoxEsMa.setSelectedItem(descripcion);
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al cargar los estados de la mascota.");
    }
}


// Método para obtener un objeto JSON desde una API
private JSONObject obtenerObjetoDeApi(String urlString) throws IOException, JSONException {
    URL url = new URL(urlString);
    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
    connection.setRequestMethod("GET");
    //connection.setRequestProperty("Authorization", "Token " + token);
    connection.setRequestProperty("Authorization", "Token " + token2);
    connection.setRequestProperty("Accept", "application/json");
    connection.connect();

    int responseCode = connection.getResponseCode();
    if (responseCode == HttpURLConnection.HTTP_OK) {
        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        StringBuilder response = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            response.append(line);
        }
        reader.close();
        return new JSONObject(response.toString());
    } else {
        throw new IOException("Error en la conexión. Código de respuesta: " + responseCode);
    }
}

// Método para manejar la selección de la mascota en la tabla y cargar los datos
private void manejarSeleccionMascota() {
    // Obtener la fila seleccionada
    int filaSeleccionada = TablaMascotasAdoptadas.getSelectedRow();

    if (filaSeleccionada != -1) {
        // Obtener el ID de la mascota en la primera columna (suponiendo que el ID está en la columna 0)
        int mascotaId = (int) TablaMascotasAdoptadas.getValueAt(filaSeleccionada, 0);

        // Confirmación de selección
        int confirmacion = JOptionPane.showConfirmDialog(
            null,
            "¿Está seguro de que desea cargar los datos de esta mascota?",
            "Confirmar selección",
            JOptionPane.YES_NO_OPTION
        );

        if (confirmacion == JOptionPane.YES_OPTION) {
            try {
                // Llamar al método para cargar los datos de la mascota
                seleccionarMascota(mascotaId);
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error al manejar la selección de la mascota.");
            }
        }
    } else {
        JOptionPane.showMessageDialog(null, "Por favor, seleccione una mascota de la tabla.");
    }
}

//--------------------------------------------------------FIN SELECCION MASCOTA ADOPTADA-------------------------------------------------------
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Mascotas_Adoptadas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Mascotas_Adoptadas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Mascotas_Adoptadas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Mascotas_Adoptadas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Mascotas_Adoptadas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTEliminarMasAdop;
    private javax.swing.JButton BTModificarMasAdop;
    private javax.swing.JButton BTSeleccionarMasAdop;
    private javax.swing.JButton BTVolver;
    private javax.swing.JComboBox<String> ComboBoxEsMa;
    private javax.swing.JTable TablaMascotasAdoptadas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField txtNombreMascota;
    private javax.swing.JLabel txtUsuario;
    // End of variables declaration//GEN-END:variables
}
