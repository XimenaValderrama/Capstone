/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */



package Vista;

import java.awt.Color;
import java.awt.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.table.DefaultTableModel;
import org.json.JSONArray;
import org.json.JSONObject;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import javax.swing.JOptionPane;
import org.json.Cookie;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import org.json.JSONException;

/**
 *
 * @author digim
 */
public class Usuarios extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    public Usuarios() {
        setTitle("GESTIONAR USUARIOS");
        setResizable(false);
        initComponents();
        this.setLocationRelativeTo(null);
        
        Login login = new Login();
        txtUsuario.setText(login.TipoUsuario);
        
        cargarDatosTabla(); // Llamamos al m√©todo para cargar datos de la API en la tabla
        
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setIconImage(new ImageIcon("src/Img/Icono.png").getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        BTEliminarUS = new javax.swing.JButton();
        txtUsuario = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableUsuarios = new javax.swing.JTable();
        BTSeleccionarUS = new javax.swing.JButton();
        BTVolver = new javax.swing.JButton();
        txtNombre = new javax.swing.JTextField();
        txtTelefono = new javax.swing.JTextField();
        txtRut = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        BTModificarUS1 = new javax.swing.JButton();
        txtEC = new javax.swing.JTextField();
        txtG = new javax.swing.JTextField();
        txtApellido = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 204, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("Bienvenido:");

        BTEliminarUS.setText("Eliminar Usuarios");
        BTEliminarUS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTEliminarUSActionPerformed(evt);
            }
        });

        txtUsuario.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        txtUsuario.setText("@NOMBRE ADMIN");

        TableUsuarios.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        TableUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Apellido", "Rut", "Telefono", "Estado Economico", "Genero", "Pais", "Region", "Provincia", "Comuna", "Direccion"
            }
        ));
        TableUsuarios.setMinimumSize(new java.awt.Dimension(180, 180));
        TableUsuarios.setRowHeight(20);
        jScrollPane2.setViewportView(TableUsuarios);
        if (TableUsuarios.getColumnModel().getColumnCount() > 0) {
            TableUsuarios.getColumnModel().getColumn(0).setMaxWidth(100);
            TableUsuarios.getColumnModel().getColumn(3).setMinWidth(100);
            TableUsuarios.getColumnModel().getColumn(4).setMinWidth(100);
            TableUsuarios.getColumnModel().getColumn(5).setMinWidth(100);
            TableUsuarios.getColumnModel().getColumn(6).setMinWidth(100);
            TableUsuarios.getColumnModel().getColumn(8).setMinWidth(350);
            TableUsuarios.getColumnModel().getColumn(9).setMinWidth(200);
            TableUsuarios.getColumnModel().getColumn(10).setMinWidth(100);
            TableUsuarios.getColumnModel().getColumn(11).setMinWidth(100);
        }

        BTSeleccionarUS.setText("Seleccionar Usuario");
        BTSeleccionarUS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTSeleccionarUSActionPerformed(evt);
            }
        });

        BTVolver.setText("Volver");
        BTVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTVolverActionPerformed(evt);
            }
        });

        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });

        jLabel2.setText("Nombre");

        jLabel3.setText("Rut");

        jLabel4.setText("Telefono");

        jLabel5.setText("Estado Economico");

        jLabel6.setText("Genero");

        BTModificarUS1.setText("Modificar Usuarios");
        BTModificarUS1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTModificarUS1ActionPerformed(evt);
            }
        });

        txtApellido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtApellidoActionPerformed(evt);
            }
        });

        jLabel7.setText("Apellido");

        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });

        jLabel8.setText("Nombre de Usuario");

        txtUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsernameActionPerformed(evt);
            }
        });

        jLabel9.setText("Email");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(BTVolver)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addGap(46, 46, 46)
                        .addComponent(txtUsuario)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel8))
                                        .addGap(57, 57, 57)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(15, 15, 15)
                                                .addComponent(BTSeleccionarUS)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                            .addComponent(txtUsername)
                                            .addComponent(txtApellido)
                                            .addComponent(txtNombre)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel9))
                                        .addGap(62, 62, 62)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtEmail)
                                            .addComponent(txtEC, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(txtTelefono, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(txtG)
                                            .addComponent(txtRut))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(BTEliminarUS, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(BTModificarUS1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1466, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtUsuario)
                            .addComponent(jLabel1)))
                    .addComponent(BTVolver))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 709, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(BTSeleccionarUS)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtRut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtEC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addComponent(BTModificarUS1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(BTEliminarUS, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BTVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTVolverActionPerformed
            Menu_Admin Menu_a = new Menu_Admin();
            Menu_a.setVisible(true);
            this.dispose();
    }//GEN-LAST:event_BTVolverActionPerformed

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed

    private void BTSeleccionarUSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTSeleccionarUSActionPerformed
        manejarSeleccionUsuario(); // Llama al m√©todo para manejar la selecci√≥n del usuario
    }//GEN-LAST:event_BTSeleccionarUSActionPerformed

    private void BTEliminarUSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTEliminarUSActionPerformed
        manejarEliminacionUsuario();
    }//GEN-LAST:event_BTEliminarUSActionPerformed

    private void BTModificarUS1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTModificarUS1ActionPerformed
        manejarModificacionUsuario();
    }//GEN-LAST:event_BTModificarUS1ActionPerformed

    private void txtApellidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtApellidoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtApellidoActionPerformed

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailActionPerformed

    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsernameActionPerformed

private int usuarioId; // Variable para almacenar la ID seleccionada
private String token = "847c45faa3fe195e77a83ac0229e88494461e3aa";




public void inicializarComponentes() {

    
    // Cargar los datos en la tabla
    cargarDatosTabla(); // Llama al m√©todo para cargar los datos al inicio
}


//--------------------------------------------------------INICIO LISTAR DATOS-------------------------------------------------------------------------
private void cargarDatosTabla() {
    String usuariosUrl = "http://127.0.0.1:8000/api/perfilusuario/?format=json";
    String direccionesUrl = "http://127.0.0.1:8000/api/direccionusuario/?format=json";
    DefaultTableModel model = (DefaultTableModel) TableUsuarios.getModel();
    model.setRowCount(0); // Limpiar la tabla antes de cargar nuevos datos

    try {
        // Obtener datos de usuarios
        JSONArray usuariosArray = obtenerDatosDeApi(usuariosUrl);

        // Obtener datos de direcciones
        JSONArray direccionesArray = obtenerDatosDeApi(direccionesUrl);

        // Crear un mapa para relacionar usuario ID con su direcci√≥n
        Map<Integer, String> direccionesMap = procesarDirecciones(direccionesArray);

        // Procesar datos de usuarios
        for (int i = 0; i < usuariosArray.length(); i++) {
            JSONObject usuarioObj = usuariosArray.getJSONObject(i);
            JSONObject DireccionObj = direccionesArray.getJSONObject(i);
            int id = usuarioObj.getInt("id");
            String rut = usuarioObj.optString("rut", "N/A");
            String telefono = usuarioObj.optString("telefono", "N/A");

            // Procesar el estado econ√≥mico
            JSONObject estadoEconomicoObj = usuarioObj.optJSONObject("estado_economico");
            String estadoEconomico = estadoEconomicoObj != null ? estadoEconomicoObj.optString("descripcion", "N/A") : "N/A";

            // Procesar g√©nero
            JSONObject generoObj = usuarioObj.optJSONObject("genero");
            String genero = generoObj != null ? generoObj.optString("descripcion", "N/A") : usuarioObj.optString("genero", "N/A");

            // Obtener datos del usuario Django
            JSONObject usuarioDjango = usuarioObj.optJSONObject("usuario_django");
            String firstName = usuarioDjango != null ? usuarioDjango.optString("first_name", "N/A") : "N/A";
            String lastName = usuarioDjango != null ? usuarioDjango.optString("last_name", "N/A") : "N/A";
            
            //Sacar La Calle
            String direccion = DireccionObj.optString("calle", "N/A");
            
            //Sacar la Comuna
            JSONObject ComunaObj = DireccionObj.optJSONObject("comuna");
            String comuna = ComunaObj != null ? ComunaObj.optString("nombre", "N/A") : "N/A";
   
            //Sacar La Provincia
            JSONObject ProvinciaObj = ComunaObj.optJSONObject("provincia");
            String Provincia = ProvinciaObj != null ? ProvinciaObj.optString("nombre", "N/A") : "N/A";
            
            //Sacar La Region
            JSONObject RegionObj = ProvinciaObj.optJSONObject("region");
            String Region = RegionObj != null ? RegionObj.optString("nombre", "N/A") : "N/A";
            
            //Sacar El Pais
            JSONObject PaisObj = RegionObj.optJSONObject("pais");
            String Pais = PaisObj != null ? PaisObj.optString("nombre", "N/A") : "N/A";

            
            // A√±adir datos a la tabla
            model.addRow(new Object[]{id, firstName, lastName, rut, telefono, estadoEconomico, genero, Pais, Region, Provincia, comuna, direccion});
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al cargar datos de las APIs.");
    }
}

// M√©todo para obtener datos de la API
private JSONArray obtenerDatosDeApi(String urlString) throws IOException, JSONException {
    URL url = new URL(urlString);
    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
    connection.setRequestMethod("GET");
    connection.setRequestProperty("Authorization", "Token " + token);
    connection.connect();

    int responseCode = connection.getResponseCode();
    if (responseCode == HttpURLConnection.HTTP_OK) {
        BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        StringBuilder response = new StringBuilder();
        String inputLine;
        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
        }
        in.close();
        return new JSONArray(response.toString());
    } else {
        throw new IOException("Error en la conexi√≥n. C√≥digo de respuesta: " + responseCode);
    }
}

private Map<Integer, String> procesarDirecciones(JSONArray direccionesArray) {
    Map<Integer, String> direccionesMap = new HashMap<>();
    try {
        for (int i = 0; i < direccionesArray.length(); i++) {
            JSONObject direccionObj = direccionesArray.getJSONObject(i);
            int userId = direccionObj.getInt("id"); // ID del usuario asociado a la direcci√≥n
            String calle = direccionObj.optString("calle", "N/A");

            // Obtener los datos anidados de comuna, provincia, regi√≥n y pa√≠s
            JSONObject comunaObj = direccionObj.optJSONObject("comuna");
            String comunaNombre = "N/A";
            String provinciaNombre = "N/A";
            String regionNombre = "N/A";
            String paisNombre = "N/A";

            if (comunaObj != null) {
                comunaNombre = comunaObj.optString("nombre", "N/A");

                JSONObject provinciaObj = comunaObj.optJSONObject("provincia");
                if (provinciaObj != null) {
                    provinciaNombre = provinciaObj.optString("nombre", "N/A");

                    JSONObject regionObj = provinciaObj.optJSONObject("region");
                    if (regionObj != null) {
                        regionNombre = regionObj.optString("nombre", "N/A");

                        JSONObject paisObj = regionObj.optJSONObject("pais");
                        if (paisObj != null) {
                            paisNombre = paisObj.optString("nombre", "N/A");
                        }
                    }
                }
            }

            // Formatear la direcci√≥n completa
            String direccionCompleta = calle + ", " + comunaNombre + ", " + provinciaNombre + ", " + regionNombre + ", " + paisNombre;

            // Guardar la direcci√≥n asociada al ID del usuario
            direccionesMap.put(userId, direccionCompleta);

            // Opcional: Mostrar en consola
            System.out.println("ID Usuario: " + userId + ", Direcci√≥n Completa: " + direccionCompleta);
        }
    } catch (JSONException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al procesar datos de direcciones.");
    }
    return direccionesMap;
}






//-------------------------------------------------------FIN LISTAR DATOS---------------------------------------------------------------------
    
    
//-------------------------------------------------------INICIO MODIFICAR------------------------------------------------//

private void modificarUsuario(int usuarioId) {
    String urlString = "http://127.0.0.1:8000/api/perfilusuario/" + usuarioId + "/"; // URL de la API para modificar datos
    HttpURLConnection connection = null;

    try {
        // 1. Obtener los datos actuales del usuario
        URL getUrl = new URL(urlString);
        HttpURLConnection getConnection = (HttpURLConnection) getUrl.openConnection();
        getConnection.setRequestMethod("GET");
        getConnection.setRequestProperty("Authorization", "Token " + token);
        getConnection.setRequestProperty("Accept", "application/json");
        getConnection.connect();

        int getResponseCode = getConnection.getResponseCode();
        if (getResponseCode != HttpURLConnection.HTTP_OK) {
            JOptionPane.showMessageDialog(null, 
                "Error al obtener los datos actuales del usuario. C√≥digo de respuesta: " + getResponseCode, 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        BufferedReader reader = new BufferedReader(new InputStreamReader(getConnection.getInputStream(), "utf-8"));
        StringBuilder currentDataBuilder = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            currentDataBuilder.append(line.trim());
        }
        reader.close();

        JSONObject currentData = new JSONObject(currentDataBuilder.toString());
        getConnection.disconnect();

        // 2. Crear el objeto JSON con los datos nuevos
        JSONObject jsonData = new JSONObject();
        jsonData.put("usuario_django", new JSONObject()
                .put("first_name", txtNombre.getText())
                .put("last_name", txtApellido.getText())
                .put("username", txtUsername.getText())
                .put("email", txtEmail.getText()));
        jsonData.put("rut", txtRut.getText());
        jsonData.put("telefono", txtTelefono.getText());
        jsonData.put("genero", new JSONObject().put("descripcion", txtG.getText()));
        jsonData.put("estado_economico", new JSONObject().put("descripcion", txtEC.getText()));

        // 3. Validar si al menos un campo ha cambiado
        boolean hasChanges = false;
        if (!txtNombre.getText().equals(currentData.getJSONObject("usuario_django").getString("first_name")) ||
            !txtApellido.getText().equals(currentData.getJSONObject("usuario_django").getString("last_name")) ||
            !txtUsername.getText().equals(currentData.getJSONObject("usuario_django").getString("username")) ||
            !txtEmail.getText().equals(currentData.getJSONObject("usuario_django").getString("email")) ||
            !txtRut.getText().equals(currentData.getString("rut")) ||
            !txtTelefono.getText().equals(currentData.getString("telefono")) ||
            !txtG.getText().equals(currentData.getJSONObject("genero").getString("descripcion")) ||
            !txtEC.getText().equals(currentData.getJSONObject("estado_economico").getString("descripcion"))) {
            hasChanges = true;
        }

        if (!hasChanges) {
            JOptionPane.showMessageDialog(null, 
                "No se realizaron cambios. Al menos un campo debe modificarse.", 
                "Advertencia", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        // 4. Realizar la solicitud PUT
        URL url = new URL(urlString);
        connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("PUT");
        connection.setRequestProperty("Authorization", "Token " + token);
        connection.setRequestProperty("Content-Type", "application/json; utf-8");
        connection.setRequestProperty("Accept", "application/json");
        connection.setDoOutput(true);

        try (OutputStream os = connection.getOutputStream()) {
            byte[] input = jsonData.toString().getBytes("utf-8");
            os.write(input, 0, input.length);
        }

        // 5. Leer la respuesta de la API
        int responseCode = connection.getResponseCode();
        if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_NO_CONTENT) {
            JOptionPane.showMessageDialog(null, 
                "Usuario modificado con √©xito.", 
                "√âxito", 
                JOptionPane.INFORMATION_MESSAGE);
        } else {
            BufferedReader errorReader = new BufferedReader(new InputStreamReader(connection.getErrorStream(), "utf-8"));
            StringBuilder errorResponse = new StringBuilder();
            while ((line = errorReader.readLine()) != null) {
                errorResponse.append(line.trim());
            }
            JOptionPane.showMessageDialog(null, 
                "Error al modificar el usuario. C√≥digo de respuesta: " + responseCode + "\nDetalles del error: " + errorResponse.toString(), 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, 
            "Ocurri√≥ un error", 
            "Error", 
            JOptionPane.ERROR_MESSAGE);
 
        e.printStackTrace();
    } finally {
        if (connection != null) {
            connection.disconnect();
        }
    }
}




private void manejarModificacionUsuario() {
    int filaSeleccionada = TableUsuarios.getSelectedRow();

    if (filaSeleccionada != -1) {
        int usuarioId = (int) TableUsuarios.getValueAt(filaSeleccionada, 0);

        int confirmacion = JOptionPane.showConfirmDialog(null,
            "¬øEst√° seguro de que desea modificar los datos de este usuario?",
            "Confirmar modificaci√≥n",
            JOptionPane.YES_NO_OPTION);

        if (confirmacion == JOptionPane.YES_OPTION) {
            modificarUsuario(usuarioId);
        }
    } else {
        JOptionPane.showMessageDialog(null, "Por favor, seleccione un usuario de la tabla.");
    }
}

 
//-----------------------------------------------------FIN MODIFICAR------------------------------------------------------------------------
    
//-----------------------------------------------------INICIO ELIMINAR----------------------------------------------------------------------
    
    // M√©todo para eliminar un usuario a trav√©s de la API
    private void eliminarUsuario(int usuarioId) {
        String urlString = "http://127.0.0.1:8000/eliminar_usuario/" + usuarioId + "/"; // URL de la API para eliminar

        try {
            // Crear la URL y la conexi√≥n
            URL url = new URL(urlString);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();

            // Configurar el m√©todo GET y los encabezados
            connection.setRequestMethod("GET");
            connection.setRequestProperty("Authorization", "Token " + token);  // Token de autenticaci√≥n
            connection.setRequestProperty("Accept", "application/json");

            // Conectar y obtener la respuesta
            connection.connect();
            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_NO_CONTENT) {
                JOptionPane.showMessageDialog(null, "Usuario eliminado correctamente.");
                // Aqu√≠ puedes actualizar la tabla o hacer otras acciones
            } else {
                JOptionPane.showMessageDialog(null, "Error al eliminar usuario. C√≥digo de respuesta: " + responseCode);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al eliminar usuario.");
        }
    }

    // M√©todo com√∫n para manejar la eliminaci√≥n del usuario
    private void manejarEliminacionUsuario() {
        // Obtener la fila seleccionada
        int filaSeleccionada = TableUsuarios.getSelectedRow();

        if (filaSeleccionada != -1) {
            // Obtener el ID del usuario en la primera columna (suponiendo que el ID est√° en la columna 0)
            int usuarioId = (int) TableUsuarios.getValueAt(filaSeleccionada, 0);

            // Mostrar un cuadro de confirmaci√≥n para eliminar el usuario
            int confirmacion = JOptionPane.showConfirmDialog(null, 
                "¬øEst√° seguro de que desea eliminar este usuario?", 
                "Confirmar eliminaci√≥n", 
                JOptionPane.YES_NO_OPTION);

            if (confirmacion == JOptionPane.YES_OPTION) {
                eliminarUsuario(usuarioId); // Llamar al m√©todo de eliminaci√≥n
                cargarDatosTabla();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, seleccione un usuario de la tabla.");
        }
    }

    // M√©todo para agregar el listener al hacer clic en la fila de la tabla
    private void agregarListenerTabla() {
        TableUsuarios.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                manejarEliminacionUsuario(); // Llamar al m√©todo com√∫n
            }
        });
    }

    
//-----------------------------------------------------FIN ELIMINAR-------------------------------------------------------------------------

    
//-----------------------------------------------------INICIO SELECCIONAR USUARIO-----------------------------------------------------------
    
// M√©todo para seleccionar un usuario y cargar sus datos desde la API
// M√©todo para cargar los datos del usuario seleccionado
private void seleccionarUsuario(int usuarioId) {
    String urlString = "http://127.0.0.1:8000/api/perfilusuario/" + usuarioId + "/"; // URL de la API para obtener datos

    try {
        // Crear la URL y la conexi√≥n
        URL url = new URL(urlString);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();

        // Configurar el m√©todo GET y los encabezados
        connection.setRequestMethod("GET");
        connection.setRequestProperty("Authorization", "Token " + token);  // Token de autenticaci√≥n
        connection.setRequestProperty("Accept", "application/json");

        // Conectar y obtener la respuesta
        connection.connect();
        int responseCode = connection.getResponseCode();

        if (responseCode == HttpURLConnection.HTTP_OK) {
            // Leer la respuesta de la API
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder response = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                response.append(line);
            }

            // Convertir la respuesta en un JSONObject
            JSONObject jsonResponse = new JSONObject(response.toString());

            // Procesar estado econ√≥mico como objeto JSON
            String estadoEconomico = "N/A";
            JSONObject estadoEconomicoObj = jsonResponse.optJSONObject("estado_economico");
            if (estadoEconomicoObj != null) {
                estadoEconomico = estadoEconomicoObj.optString("descripcion", "N/A");
            }

            // Procesar genero como objeto JSON o cadena simple
            String genero = "N/A";
            JSONObject generoObj = jsonResponse.optJSONObject("genero");
            if (generoObj != null) {
                genero = generoObj.optString("descripcion", "N/A");
            } else {
                // Si genero es un valor simple, asignarlo directamente
                genero = jsonResponse.optString("genero", "N/A");
            }

            // Obtener los datos de usuario_django (que es un diccionario)
            String firstName = "N/A";
            String lastName = "N/A";
            String username = "N/A";
            String email = "N/A";
            if (jsonResponse.has("usuario_django")) {
                JSONObject usuarioDjango = jsonResponse.getJSONObject("usuario_django");
                firstName = usuarioDjango.optString("first_name", "N/A");
                lastName = usuarioDjango.optString("last_name", "N/A");
                username = usuarioDjango.optString("username", "N/A");
                email = usuarioDjango.optString("email", "N/A");
            }

            // Obtener otros datos del usuario
            String rut = jsonResponse.optString("rut", "N/A");
            String telefono = jsonResponse.optString("telefono", "N/A");

            // Mostrar los datos en los campos correspondientes
            txtNombre.setText(firstName);
            txtApellido.setText(lastName);
            txtRut.setText(rut);
            txtTelefono.setText(telefono);
            txtUsername.setText(username);  // Asumiendo que tienes un campo para mostrar el username
            txtEmail.setText(email);  // Asumiendo que tienes un campo para mostrar el email

            // Mostrar valores procesados para estado econ√≥mico y genero
            txtEC.setText(estadoEconomico);
            txtG.setText(genero);

            // Deshabilitar los campos que no deben ser modificados
            txtNombre.setEditable(false);
            txtNombre.setBackground(Color.GRAY);

            txtApellido.setEditable(false);
            txtApellido.setBackground(Color.GRAY);

            txtRut.setEditable(false);
            txtRut.setBackground(Color.GRAY);



        } else {
            JOptionPane.showMessageDialog(null, "Error al obtener datos del usuario.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al seleccionar usuario.");
    }
}


// M√©todo para manejar la selecci√≥n del usuario en la tabla y cargar datos
private void manejarSeleccionUsuario() {
    // Obtener la fila seleccionada
    int filaSeleccionada = TableUsuarios.getSelectedRow();

    if (filaSeleccionada != -1) {
        // Obtener el ID del usuario en la primera columna (suponiendo que el ID est√° en la columna 0)
        int usuarioId = (int) TableUsuarios.getValueAt(filaSeleccionada, 0);

        // Confirmaci√≥n de selecci√≥n
        int confirmacion = JOptionPane.showConfirmDialog(null,
            "¬øEst√° seguro de que desea cargar los datos de este usuario?",
            "Confirmar selecci√≥n",
            JOptionPane.YES_NO_OPTION);

        if (confirmacion == JOptionPane.YES_OPTION) {
            seleccionarUsuario(usuarioId); // Llamar al m√©todo para cargar los datos
        }
    } else {
        JOptionPane.showMessageDialog(null, "Por favor, seleccione un usuario de la tabla.");
    }
}






    
        


   
//-----------------------------------------------------FIN SELECCIONAR USUARIO--------------------------------------------------------------


    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(Usuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Usuarios().setVisible(true);
            }
        });
    }
    

    

        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTEliminarUS;
    private javax.swing.JButton BTModificarUS1;
    private javax.swing.JButton BTSeleccionarUS;
    private javax.swing.JButton BTVolver;
    private javax.swing.JTable TableUsuarios;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtEC;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtG;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtRut;
    private javax.swing.JTextField txtTelefono;
    private javax.swing.JTextField txtUsername;
    private javax.swing.JLabel txtUsuario;
    // End of variables declaration//GEN-END:variables


}
