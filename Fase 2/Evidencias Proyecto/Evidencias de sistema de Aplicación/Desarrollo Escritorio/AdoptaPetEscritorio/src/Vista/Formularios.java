/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vista;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author digim
 */
public class Formularios extends javax.swing.JFrame {


    public Formularios() {
        setTitle("GESTIONAR FORMULARIOS");
        setResizable(false);
        initComponents();
        this.setLocationRelativeTo(null);
        
        Login login = new Login();
        txtUsuario.setText(login.TipoUsuario);
        cargarDatosTabla();
        
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setIconImage(new ImageIcon("src/Img/Icono.png").getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        BTEliminarFormu = new javax.swing.JButton();
        txtUsuario = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableFormulario = new javax.swing.JTable();
        BTModificarFormu = new javax.swing.JButton();
        BTVolver = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtEstadoFor = new javax.swing.JTextField();
        txtComentarios = new javax.swing.JTextField();
        BTSeleccionarForm = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 204, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("Bienvenido:");

        BTEliminarFormu.setText("Eliminar Formularios");
        BTEliminarFormu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTEliminarFormuActionPerformed(evt);
            }
        });

        txtUsuario.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        txtUsuario.setText("@NOMBRE ADMIN o Usuario");

        TableFormulario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Mascota", "Due√±o", "Estado Formulario", "Comentarios"
            }
        ));
        jScrollPane2.setViewportView(TableFormulario);

        BTModificarFormu.setText("Modificar Formularios");
        BTModificarFormu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTModificarFormuActionPerformed(evt);
            }
        });

        BTVolver.setText("Volver");
        BTVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTVolverActionPerformed(evt);
            }
        });

        jLabel2.setText("Estado Formulario");

        jLabel3.setText("Comentarios");

        BTSeleccionarForm.setText("Seleccionar Formulario");
        BTSeleccionarForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTSeleccionarFormActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(BTVolver)
                        .addGap(72, 72, 72)
                        .addComponent(jLabel1)
                        .addGap(47, 47, 47)
                        .addComponent(txtUsuario)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(BTEliminarFormu, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(BTModificarFormu, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtEstadoFor, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                                            .addComponent(txtComentarios))))
                                .addGap(45, 45, 45))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(BTSeleccionarForm)
                                .addGap(79, 79, 79)))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtUsuario)
                            .addComponent(jLabel1)))
                    .addComponent(BTVolver))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(BTSeleccionarForm)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtEstadoFor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtComentarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BTModificarFormu, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(BTEliminarFormu, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BTVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTVolverActionPerformed
            Menu_Admin Menu_a = new Menu_Admin();
            Menu_a.setVisible(true);
            this.dispose();
    }//GEN-LAST:event_BTVolverActionPerformed

    private void BTModificarFormuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTModificarFormuActionPerformed
       manejarModificacionFormulario();
    }//GEN-LAST:event_BTModificarFormuActionPerformed

    private void BTEliminarFormuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTEliminarFormuActionPerformed
       manejarEliminacionFormulario();
    }//GEN-LAST:event_BTEliminarFormuActionPerformed

    private void BTSeleccionarFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTSeleccionarFormActionPerformed
        manejarSeleccionFormulario(); // Llama al m√©todo para manejar la selecci√≥n del usuario
    }//GEN-LAST:event_BTSeleccionarFormActionPerformed

private String token = "847c45faa3fe195e77a83ac0229e88494461e3aa";


//-------------------------------------------------LISTAR DATOS FORMULARIOS----------------------------------------------------------    
private void cargarDatosTabla() {
    String formularioUrl = "http://127.0.0.1:8000/api/formulario/?format=json";
    String usuariosUrl = "http://127.0.0.1:8000/api/perfilusuario/?format=json";
    String mascotasUrl = "http://127.0.0.1:8000/api/mascota/?format=json"; // URL para las mascotas
    DefaultTableModel model = (DefaultTableModel) TableFormulario.getModel();
    model.setRowCount(0); // Limpiar la tabla antes de cargar nuevos datos

    try {
        // Obtener datos de Formulario
        JSONArray formularioArray = obtenerDatosDeApi(formularioUrl);

        // Obtener datos de usuarios
        JSONArray usuariosArray = obtenerDatosDeApi(usuariosUrl);

        // Obtener datos de mascotas
        JSONArray mascotasArray = obtenerDatosDeApi(mascotasUrl);

        // Crear un mapa para relacionar mascota ID con su formulario
        Map<Integer, JSONObject> mascotaFormularioMap = new HashMap<>();
        for (int j = 0; j < formularioArray.length(); j++) {
            JSONObject formulario = formularioArray.getJSONObject(j);
            JSONObject mascota = formulario.optJSONObject("mascota");
            if (mascota != null) {
                int mascotaId = mascota.getInt("id");
                mascotaFormularioMap.put(mascotaId, formulario);
            }
        }

        // Procesar datos de las mascotas
        for (int i = 0; i < mascotasArray.length(); i++) {
            JSONObject mascotaObj = mascotasArray.getJSONObject(i);
            int mascotaId = mascotaObj.getInt("id");

            // Verificar si la mascota tiene un formulario asociado
            JSONObject formularioAsociado = mascotaFormularioMap.getOrDefault(mascotaId, null);

            if (formularioAsociado != null) {
                // Obtener datos del formulario
                int formularioId = formularioAsociado.getInt("id");
                String comentarios = formularioAsociado.optString("comentarios", "N/A");
                JSONObject estadoFormularioObj = formularioAsociado.optJSONObject("estado_formulario");
                String estadoFormulario = estadoFormularioObj != null ? estadoFormularioObj.optString("descripcion", "N/A") : "N/A";

                // Obtener datos del due√±o de la mascota
                JSONObject usuarioObj = mascotaObj.optJSONObject("usuario");
                String nombreUsuario = "N/A";
                if (usuarioObj != null) {
                    JSONObject usuarioDjango = usuarioObj.optJSONObject("usuario_django");
                    String firstName = usuarioDjango != null ? usuarioDjango.optString("first_name", "N/A") : "N/A";
                    String lastName = usuarioDjango != null ? usuarioDjango.optString("last_name", "N/A") : "N/A";
                    nombreUsuario = firstName + " " + lastName;
                }

                // A√±adir datos a la tabla
                String nombreMascota = mascotaObj.optString("nombre", "N/A");
                model.addRow(new Object[]{formularioId, nombreMascota, nombreUsuario, estadoFormulario, comentarios});
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al cargar datos de las APIs.");
    }
}





// M√©todo para obtener datos de la API
private JSONArray obtenerDatosDeApi(String urlString) throws IOException, JSONException {
    URL url = new URL(urlString);
    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
    connection.setRequestMethod("GET");
    connection.setRequestProperty("Authorization", "Token " + token);
    connection.connect();

    int responseCode = connection.getResponseCode();
    if (responseCode == HttpURLConnection.HTTP_OK) {
        BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        StringBuilder response = new StringBuilder();
        String inputLine;
        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
        }
        in.close();
        return new JSONArray(response.toString());
    } else {
        throw new IOException("Error en la conexi√≥n. C√≥digo de respuesta: " + responseCode);
    }
}




// M√©todo para procesar las mascotas
private Map<Integer, String> procesarMascotas(JSONArray mascotasArray) {
    Map<Integer, String> mascotasMap = new HashMap<>();
    try {
        for (int i = 0; i < mascotasArray.length(); i++) {
            JSONObject mascotaObj = mascotasArray.getJSONObject(i);
            int idUsuario = mascotaObj.optJSONObject("usuario") != null ? mascotaObj.optJSONObject("usuario").optInt("id", -1) : -1;
            String nombreMascota = mascotaObj.optString("nombre", "N/A");
            
            // Guardar el nombre de la mascota asociado al ID del usuario
            if (idUsuario != -1) {
                mascotasMap.put(idUsuario, nombreMascota);
            }

            // Opcional: Mostrar en consola
            System.out.println("ID Usuario: " + idUsuario + ", Mascota: " + nombreMascota);
        }
    } catch (JSONException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al procesar datos de mascotas.");
    }
    return mascotasMap;
}

private Map<Integer, String> procesarDirecciones(JSONArray direccionesArray) {
    Map<Integer, String> direccionesMap = new HashMap<>();
    try {
        for (int i = 0; i < direccionesArray.length(); i++) {
            JSONObject direccionObj = direccionesArray.getJSONObject(i);
            int userId = direccionObj.getInt("id"); // ID del usuario asociado a la direcci√≥n
            String calle = direccionObj.optString("calle", "N/A");

            // Obtener los datos anidados de comuna, provincia, regi√≥n y pa√≠s
            JSONObject comunaObj = direccionObj.optJSONObject("comuna");
            String comunaNombre = "N/A";
            String provinciaNombre = "N/A";
            String regionNombre = "N/A";
            String paisNombre = "N/A";

            if (comunaObj != null) {
                comunaNombre = comunaObj.optString("nombre", "N/A");

                JSONObject provinciaObj = comunaObj.optJSONObject("provincia");
                if (provinciaObj != null) {
                    provinciaNombre = provinciaObj.optString("nombre", "N/A");

                    JSONObject regionObj = provinciaObj.optJSONObject("region");
                    if (regionObj != null) {
                        regionNombre = regionObj.optString("nombre", "N/A");

                        JSONObject paisObj = regionObj.optJSONObject("pais");
                        if (paisObj != null) {
                            paisNombre = paisObj.optString("nombre", "N/A");
                        }
                    }
                }
            }

            // Formatear la direcci√≥n completa
            String direccionCompleta = calle + ", " + comunaNombre + ", " + provinciaNombre + ", " + regionNombre + ", " + paisNombre;

            // Guardar la direcci√≥n asociada al ID del usuario
            direccionesMap.put(userId, direccionCompleta);

            // Opcional: Mostrar en consola
            System.out.println("ID Usuario: " + userId + ", Direcci√≥n Completa: " + direccionCompleta);
        }
    } catch (JSONException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al procesar datos de direcciones.");
    }
    return direccionesMap;
}
//-------------------------------------------------FIN LISTAR DATOS FORMULARIO------------------------------------------------------
    

//-------------------------------------------------INICIO MODIFICAR FORMULARIO-----------------------------------------------------

private void modificarFormulario(int formularioId) {
    String urlString = "http://127.0.0.1:8000/formulario-adopcion/" + formularioId + "/";

    try {
        // Crear la URL y la conexi√≥n
        URL url = new URL(urlString);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();

        // Configurar el m√©todo PUT
        connection.setRequestMethod("PUT");
        connection.setRequestProperty("Authorization", "Token " + token);  // Token de autenticaci√≥n
        connection.setRequestProperty("Content-Type", "application/json; utf-8");
        connection.setRequestProperty("Accept", "application/json");
        connection.setDoOutput(true);

        // Crear el objeto JSON con los datos nuevos
        JSONObject jsonData = new JSONObject();
        jsonData.put("estado_formulario", new JSONObject().put("descripcion", txtEstadoFor.getText())); // Estado del formulario
        jsonData.put("comentarios", txtComentarios.getText()); // Comentarios del formulario

        // Enviar los datos a la API
        try (OutputStream os = connection.getOutputStream()) {
            byte[] input = jsonData.toString().getBytes("utf-8");
            os.write(input, 0, input.length);
        }

        // Leer la respuesta de la API
        int responseCode = connection.getResponseCode();
        if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_NO_CONTENT) {
            System.out.println("Formulario modificado con √©xito.");
        } else {
            // Leer y mostrar el error desde la API
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getErrorStream(), "utf-8"));
            StringBuilder errorResponse = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                errorResponse.append(line.trim());
            }
            System.err.println("Error al modificar el formulario. C√≥digo de respuesta: " + responseCode);
            System.err.println("Detalles del error: " + errorResponse.toString());
        }
    } catch (Exception e) {
        e.printStackTrace(); // Mostrar el error completo en la consola
    }
}

private void manejarModificacionFormulario() {
    int filaSeleccionada = TableFormulario.getSelectedRow(); // Obtener la fila seleccionada en la tabla

    if (filaSeleccionada != -1) {
        int formularioId = (int) TableFormulario.getValueAt(filaSeleccionada, 0); // Obtener el ID del formulario

        // Confirmar la modificaci√≥n
        int confirmacion = JOptionPane.showConfirmDialog(
            null,
            "¬øEst√° seguro de que desea modificar los datos de este formulario?",
            "Confirmar modificaci√≥n",
            JOptionPane.YES_NO_OPTION
        );

        if (confirmacion == JOptionPane.YES_OPTION) {
            // Llamar al m√©todo modificarFormulario pasando el ID del formulario seleccionado
            modificarFormulario(formularioId);
            cargarDatosTabla(); // Recargar los datos de la tabla
        }
    } else {
        JOptionPane.showMessageDialog(null, "Por favor, seleccione un formulario de la tabla.");
    }
}


//-------------------------------------------------FIN MODIFICAR FORMULARIO 

//-------------------------------------------------------INICIO ELIMINAR FORMULARIO--------------------------------------------------------


// M√©todo para eliminar un Formulario a trav√©s de la API
private void eliminarFormulario(int FormularioId) {
    String urlString = "http://127.0.0.1:8000/api/formulario/" + FormularioId + "/"; // URL de la API para eliminar

    try {
        // Crear la URL y la conexi√≥n
        URL url = new URL(urlString);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();

        // Configurar el m√©todo DELETE y los encabezados
        connection.setRequestMethod("DELETE");
        connection.setRequestProperty("Authorization", "Token " + token);  // Token de autenticaci√≥n
        connection.setRequestProperty("Accept", "application/json");

        // Conectar y obtener la respuesta
        connection.connect();
        int responseCode = connection.getResponseCode();
        if (responseCode == HttpURLConnection.HTTP_NO_CONTENT) {
            JOptionPane.showMessageDialog(null, "Formulario eliminado correctamente.");
            // Aqu√≠ puedes actualizar la tabla o hacer otras acciones
        } else {
            JOptionPane.showMessageDialog(null, "Error al eliminar el formulario. C√≥digo de respuesta: " + responseCode);
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al eliminar formulario.");
    }
}

// M√©todo com√∫n para manejar la eliminaci√≥n de el Formulario
private void manejarEliminacionFormulario() {
    // Obtener la fila seleccionada
    int filaSeleccionada = TableFormulario.getSelectedRow();

    if (filaSeleccionada != -1) {
        // Obtener el ID del Formulario en la primera columna (suponiendo que el ID est√° en la columna 0)
        int FormularioId = (int) TableFormulario.getValueAt(filaSeleccionada, 0);

        // Mostrar un cuadro de confirmaci√≥n para eliminar la Formulario
        int confirmacion = JOptionPane.showConfirmDialog(null, 
            "¬øEst√° seguro de que desea eliminar esta mascota?", 
            "Confirmar eliminaci√≥n", 
            JOptionPane.YES_NO_OPTION);

        if (confirmacion == JOptionPane.YES_OPTION) {
            eliminarFormulario(FormularioId); // Llamar al m√©todo de eliminaci√≥n
            cargarDatosTabla();  // M√©todo para recargar la tabla si es necesario
        }
    } else {
        JOptionPane.showMessageDialog(null, "Por favor, seleccione una mascota de la tabla.");
    }
}

// M√©todo para agregar el listener al hacer clic en la fila de la tabla
private void agregarListenerTabla() {
    TableFormulario.addMouseListener(new MouseAdapter() {
        public void mouseClicked(MouseEvent e) {
            manejarEliminacionFormulario(); // Llamar al m√©todo com√∫n
        }
    });
}

//-------------------------------------------------------FIN ELIMINAR FORMULARIO--------------------------------------------------------








//------------------------------------------------------INICIO SELECCIONAR FORMULARIO---------------------------------------------------
// M√©todo para seleccionar un formulario y cargar sus datos desde la API
private void seleccionarFormulario(int formularioId) {
    String urlFormulario = "http://127.0.0.1:8000/api/formulario/" + formularioId + "/"; // URL de la API para obtener datos del formulario

    try {
        // Obtener los datos del formulario
        JSONObject jsonResponse = obtenerObjetoDeApi(urlFormulario);

        // Procesar estado del formulario como objeto JSON
        String estadoFormulario = "N/A";
        JSONObject estadoFormularioObj = jsonResponse.optJSONObject("estado_formulario");
        if (estadoFormularioObj != null) {
            estadoFormulario = estadoFormularioObj.optString("descripcion", "N/A");
        }

        // Obtener los comentarios del formulario
        String comentarios = jsonResponse.optString("comentarios", "N/A");

        // Mostrar los datos en los campos correspondientes
        txtEstadoFor.setText(estadoFormulario);
        txtComentarios.setText(comentarios);

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al seleccionar formulario.");
    }
}

// M√©todo para manejar la selecci√≥n del formulario en la tabla y cargar los datos
private void manejarSeleccionFormulario() {
    // Obtener la fila seleccionada
    int filaSeleccionada = TableFormulario.getSelectedRow();

    if (filaSeleccionada != -1) {
        // Obtener el ID del formulario en la primera columna (suponiendo que el ID est√° en la columna 0)
        int formularioId = (int) TableFormulario.getValueAt(filaSeleccionada, 0);

        // Confirmaci√≥n de selecci√≥n
        int confirmacion = JOptionPane.showConfirmDialog(
            null,
            "¬øEst√° seguro de que desea cargar los datos de este formulario?",
            "Confirmar selecci√≥n",
            JOptionPane.YES_NO_OPTION
        );

        if (confirmacion == JOptionPane.YES_OPTION) {
            try {
                // Llamar al m√©todo para cargar los datos del formulario
                seleccionarFormulario(formularioId);
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error al manejar la selecci√≥n del formulario.");
            }
        }
    } else {
        JOptionPane.showMessageDialog(null, "Por favor, seleccione un formulario de la tabla.");
    }
}

// M√©todo para obtener un objeto JSON desde una API (mismo que el original)
private JSONObject obtenerObjetoDeApi(String urlString) throws IOException, JSONException {
    URL url = new URL(urlString);
    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
    connection.setRequestMethod("GET");
    connection.setRequestProperty("Authorization", "Token " + token);
    connection.setRequestProperty("Accept", "application/json");
    connection.connect();

    int responseCode = connection.getResponseCode();
    if (responseCode == HttpURLConnection.HTTP_OK) {
        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        StringBuilder response = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            response.append(line);
        }
        reader.close();
        return new JSONObject(response.toString());
    } else {
        throw new IOException("Error en la conexi√≥n. C√≥digo de respuesta: " + responseCode);
    }
}




//-----------------------------------------------------FIN SELECCIONAR FORMULARIO-----------------------------------------------------






    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Formularios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Formularios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Formularios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Formularios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
       
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Formularios().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTEliminarFormu;
    private javax.swing.JButton BTModificarFormu;
    private javax.swing.JButton BTSeleccionarForm;
    private javax.swing.JButton BTVolver;
    private javax.swing.JTable TableFormulario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField txtComentarios;
    private javax.swing.JTextField txtEstadoFor;
    private javax.swing.JLabel txtUsuario;
    // End of variables declaration//GEN-END:variables
}
