/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vista;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author digim
 */
public class Ficha_Medica extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    public Ficha_Medica() {
        setTitle("GESTIONAR FICHAS MEDICAS");
        setResizable(false);
        initComponents();
        this.setLocationRelativeTo(null);
        
        Login login = new Login();
        txtUsuario.setText(login.TipoUsuario);
        
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setIconImage(new ImageIcon("src/Img/Icono.png").getImage());
        
        cargarDatosTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        BTEliminarPA = new javax.swing.JButton();
        txtUsuario = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablaFichaMedica = new javax.swing.JTable();
        BTModificarPA = new javax.swing.JButton();
        BTVolver = new javax.swing.JButton();
        BTSeleccionarFicha = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtFechaMedica = new javax.swing.JTextField();
        txtProximaConsulta = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(94, 114, 228));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("Bienvenido:");

        BTEliminarPA.setText("Eliminar Ficha Medica");
        BTEliminarPA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTEliminarPAActionPerformed(evt);
            }
        });

        txtUsuario.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        txtUsuario.setText("@NOMBRE ADMIN o Usuario");

        TablaFichaMedica.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Fecha Medica", "Proxima Consulta", "Mascota", "Tipo Alimento", "Chip", "Fecha Colocacion Chip", "Lugar de Colocacion", "Esterilizacion", "Fecha Esterilizacion", "Lugar Esterilizacion", "Desparasitado", "Fecha Desparasitacion", "Veterinaria", "Direccion veterinaria", "Nombre Vacuna", "Fecha Vacuna", "Cirugia", "Fecha Cirugia ", "Tipo Cirugia"
            }
        ));
        jScrollPane2.setViewportView(TablaFichaMedica);
        if (TablaFichaMedica.getColumnModel().getColumnCount() > 0) {
            TablaFichaMedica.getColumnModel().getColumn(5).setResizable(false);
            TablaFichaMedica.getColumnModel().getColumn(7).setResizable(false);
        }

        BTModificarPA.setText("Modificar Ficha Medica");
        BTModificarPA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTModificarPAActionPerformed(evt);
            }
        });

        BTVolver.setText("Volver");
        BTVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTVolverActionPerformed(evt);
            }
        });

        BTSeleccionarFicha.setText("Seleccionar Ficha Medica");
        BTSeleccionarFicha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTSeleccionarFichaActionPerformed(evt);
            }
        });

        jLabel2.setText("Fecha Medica");

        jLabel3.setText("Proxima Consulta");

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/logo.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(BTVolver)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(47, 47, 47)
                                .addComponent(txtUsuario)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(BTModificarPA, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 296, Short.MAX_VALUE)
                                .addComponent(BTSeleccionarFicha)
                                .addGap(282, 282, 282)
                                .addComponent(BTEliminarPA, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(380, 380, 380)))))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(36, 36, 36)
                .addComponent(txtFechaMedica, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(txtProximaConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtUsuario)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(BTModificarPA)
                                .addComponent(BTEliminarPA))
                            .addComponent(BTSeleccionarFicha)))
                    .addComponent(BTVolver)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(txtProximaConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtFechaMedica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel6)))
                .addGap(57, 57, 57)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 573, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BTVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTVolverActionPerformed
        Menu_Admin Menu_a = new Menu_Admin();
        Menu_a.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BTVolverActionPerformed

    private void BTSeleccionarFichaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTSeleccionarFichaActionPerformed
        manejarSeleccionFichaMedica();
    }//GEN-LAST:event_BTSeleccionarFichaActionPerformed

    private void BTEliminarPAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTEliminarPAActionPerformed
        manejarEliminacionFichaMedica();
    }//GEN-LAST:event_BTEliminarPAActionPerformed

    private void BTModificarPAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTModificarPAActionPerformed
        manejarModificacionFichaMedica();
    }//GEN-LAST:event_BTModificarPAActionPerformed

private String token = "8ffeb3f8e3edc9915795f7c57fb11b39b1dd96a2";
private String token2 = "a635c77de3de8cf58fa3e631b4e197b048670150";


//-------------------------------------------------------INICIO LISTAR DATOS FICHA MEDICA-------------------------------------------------------------------------------------    
    
private void cargarDatosTabla() {
    String fichamedicaUrl = "http://127.0.0.1:8000/api/fichamedica/?format=json";
    String mascotasUrl = "http://127.0.0.1:8000/api/mascota/?format=json";
    String tipoAlimentoUrl = "http://127.0.0.1:8000/api/tipoalimento/?format=json";
    String chipUrl = "http://127.0.0.1:8000/api/chip/?format=json";
    String esterilizacionUrl = "http://127.0.0.1:8000/api/esterilizacion/?format=json";
    String veterinariaUrl = "http://127.0.0.1:8000/api/veterinaria/?format=json";
    String desparasitacionUrl = "http://127.0.0.1:8000/api/desparasitacion/?format=json";
    String vacunaUrl = "http://127.0.0.1:8000/api/vacuna/?format=json";
    String cirugiaUrl = "http://127.0.0.1:8000/api/cirugia/?format=json";
    String tipoCirugiaUrl = "http://127.0.0.1:8000/api/tipocirugia/?format=json";  // Nueva API para tipo de cirugía

    DefaultTableModel model = (DefaultTableModel) TablaFichaMedica.getModel();
    model.setRowCount(0);

    try {
        // Obtener datos de todas las APIs
        JSONArray fichamedicaArray = obtenerDatosDeApi(fichamedicaUrl);
        JSONArray mascotasArray = obtenerDatosDeApi(mascotasUrl);
        JSONArray tipoAlimentoArray = obtenerDatosDeApi(tipoAlimentoUrl);
        JSONArray chipArray = obtenerDatosDeApi(chipUrl);
        JSONArray esterilizacionArray = obtenerDatosDeApi(esterilizacionUrl);
        JSONArray veterinariaArray = obtenerDatosDeApi(veterinariaUrl);
        JSONArray desparasitacionArray = obtenerDatosDeApi(desparasitacionUrl);
        JSONArray vacunaArray = obtenerDatosDeApi(vacunaUrl);
        JSONArray cirugiaArray = obtenerDatosDeApi(cirugiaUrl);
        JSONArray tipoCirugiaArray = obtenerDatosDeApi(tipoCirugiaUrl);  // Datos de la nueva API

        // Crear mapas para los datos relacionados
        Map<Integer, String> tipoAlimentoMap = new HashMap<>();
        for (int k = 0; k < tipoAlimentoArray.length(); k++) {
            JSONObject tipoAlimento = tipoAlimentoArray.getJSONObject(k);
            int tipoAlimentoId = tipoAlimento.getInt("id");
            String descripcionTipoAlimento = tipoAlimento.optString("descripcion", "No disponible");
            tipoAlimentoMap.put(tipoAlimentoId, descripcionTipoAlimento);
        }

        Map<Integer, String> tipoCirugiaMap = new HashMap<>();
        for (int k = 0; k < tipoCirugiaArray.length(); k++) {
            JSONObject tipoCirugia = tipoCirugiaArray.getJSONObject(k);
            int tipoCirugiaId = tipoCirugia.getInt("id");
            String descripcionTipoCirugia = tipoCirugia.optString("descripcion", "No disponible");
            tipoCirugiaMap.put(tipoCirugiaId, descripcionTipoCirugia);  // Llenar mapa de tipos de cirugía
        }

        Map<Integer, JSONObject> fichaChipMap = new HashMap<>();
        for (int i = 0; i < chipArray.length(); i++) {
            JSONObject chipObj = chipArray.getJSONObject(i);
            int fichaMedicaId = chipObj.getInt("id");
            fichaChipMap.put(fichaMedicaId, chipObj);
        }

        Map<Integer, JSONObject> esterilizacionFichaMedicaMap = new HashMap<>();
        for (int i = 0; i < esterilizacionArray.length(); i++) {
            JSONObject esterilizacionObj = esterilizacionArray.getJSONObject(i);
            int fichaMedicaId = esterilizacionObj.optJSONObject("ficha_medica").getInt("id");
            esterilizacionFichaMedicaMap.put(fichaMedicaId, esterilizacionObj);
        }

        Map<Integer, JSONObject> veterinariaFichaMedicaMap = new HashMap<>();
        for (int i = 0; i < veterinariaArray.length(); i++) {
            JSONObject veterinariaObj = veterinariaArray.getJSONObject(i);
            int fichaMedicaId = veterinariaObj.optJSONObject("ficha_medica").getInt("id");
            veterinariaFichaMedicaMap.put(fichaMedicaId, veterinariaObj);
        }

        Map<Integer, JSONObject> desparasitacionFichaMedicaMap = new HashMap<>();
        for (int i = 0; i < desparasitacionArray.length(); i++) {
            JSONObject desparasitacionObj = desparasitacionArray.getJSONObject(i);
            int fichaMedicaId = desparasitacionObj.optJSONObject("ficha_medica").getInt("id");
            desparasitacionFichaMedicaMap.put(fichaMedicaId, desparasitacionObj);
        }

        Map<Integer, JSONObject> vacunaFichaMedicaMap = new HashMap<>();
        for (int i = 0; i < vacunaArray.length(); i++) {
            JSONObject vacunaObj = vacunaArray.getJSONObject(i);
            int fichaMedicaId = vacunaObj.optJSONObject("ficha_medica").getInt("id");
            vacunaFichaMedicaMap.put(fichaMedicaId, vacunaObj);
        }

        Map<Integer, JSONObject> cirugiaFichaMedicaMap = new HashMap<>();
        for (int i = 0; i < cirugiaArray.length(); i++) {
            JSONObject cirugiaObj = cirugiaArray.getJSONObject(i);
            int fichaMedicaId = cirugiaObj.optJSONObject("ficha_medica").getInt("id");
            cirugiaFichaMedicaMap.put(fichaMedicaId, cirugiaObj);
        }

        Map<Integer, JSONObject> mascotaFichamedicaMap = new HashMap<>();
        for (int j = 0; j < fichamedicaArray.length(); j++) {
            JSONObject fichamedica = fichamedicaArray.getJSONObject(j);
            JSONObject mascota = fichamedica.optJSONObject("mascota");
            if (mascota != null) {
                int mascotaId = mascota.getInt("id");
                mascotaFichamedicaMap.put(mascotaId, fichamedica);
            }
        }

        // Procesar datos de las mascotas
        for (int i = 0; i < mascotasArray.length(); i++) {
            JSONObject mascotaObj = mascotasArray.getJSONObject(i);
            int mascotaId = mascotaObj.getInt("id");
            JSONObject fichamedicaAsociada = mascotaFichamedicaMap.get(mascotaId);

            if (fichamedicaAsociada != null) {
                int fichamedicaId = fichamedicaAsociada.getInt("id");
                String fechaMedica = fichamedicaAsociada.optString("fecha_medica", "N/A");
                String proxConsulta = fichamedicaAsociada.optString("prox_consulta", "N/A");

                // Tipo de alimento
                JSONObject tipoAlimentoObj = fichamedicaAsociada.optJSONObject("tipo_alimento");
                String tipoAlimentoDescripcion = tipoAlimentoObj != null
                        ? tipoAlimentoMap.getOrDefault(tipoAlimentoObj.getInt("id"), "N/A")
                        : "Sin tipo de alimento";

                // Chip
                JSONObject chipAsociado = fichaChipMap.get(fichamedicaId);
                String confirmacionChip = "No Tiene Chip";
                String fechaColocacion = "No disponible";
                String lugarColocacion = "No disponible";
                if (chipAsociado != null) {
                    confirmacionChip = chipAsociado.optBoolean("confirmacion_chip", false) ? "Tiene Chip" : "No Tiene Chip";
                    fechaColocacion = chipAsociado.optString("fecha_colocacion", "No disponible");
                    lugarColocacion = chipAsociado.optString("lugar_colocacion", "No disponible");
                }

                // Esterilización
                JSONObject esterilizacionAsociada = esterilizacionFichaMedicaMap.get(fichamedicaId);
                String confirmacionEsterilizacion = "No Esterilizado";
                String fechaEsterilizacion = "No disponible";
                String lugarEsterilizacion = "No disponible";
                if (esterilizacionAsociada != null) {
                    confirmacionEsterilizacion = esterilizacionAsociada.optBoolean("confirmacion_esterilizacion", false)
                            ? "Está Esterilizado"
                            : "No Esterilizado";
                    fechaEsterilizacion = esterilizacionAsociada.optString("fecha_esterilizacion", "No disponible");
                    lugarEsterilizacion = esterilizacionAsociada.optString("lugar_esterilizacion", "No disponible");
                }

                // Desparacitación
                JSONObject desparasitacionAsociada = desparasitacionFichaMedicaMap.get(fichamedicaId);
                String confirmacionDesparasitacion = "No Desparacitado";
                String fechaDesparasitacion = "No disponible";
                if (desparasitacionAsociada != null) {
                    confirmacionDesparasitacion = desparasitacionAsociada.optBoolean("confirmacion_desparasitacion", false)
                            ? "Está Desparacitado"
                            : "No Desparacitado";
                    fechaDesparasitacion = desparasitacionAsociada.optString("fecha_desparasitacion", "No disponible");
                }

                // Veterinaria
                JSONObject veterinariaAsociada = veterinariaFichaMedicaMap.get(fichamedicaId);
                String veterinariaNombre = "No disponible";
                String veterinariaDescrip = "No disponible";
                if (veterinariaAsociada != null) {
                    veterinariaNombre = veterinariaAsociada.optString("nombre", "No disponible");
                    veterinariaDescrip = veterinariaAsociada.optString("direccion", "No disponible");
                }

                // Vacunas
                JSONObject vacunaAsociada = vacunaFichaMedicaMap.get(fichamedicaId);
                String descripcionVacuna = "No disponible";
                String fechaVacuna = "No disponible";
                if (vacunaAsociada != null) {
                    descripcionVacuna = vacunaAsociada.optString("nombre", "No disponible");
                    fechaVacuna = vacunaAsociada.optString("fecha_vacuna", "No disponible");
                }

                // Cirugía
                JSONObject cirugiaAsociada = cirugiaFichaMedicaMap.get(fichamedicaId);
                String descripcionCirugia = "No disponible";
                String fechaCirugia = "No disponible";
                String tipoCirugia = "No disponible";

                if (cirugiaAsociada != null) {
                    descripcionCirugia = cirugiaAsociada.optString("descripcion", "No disponible");
                    fechaCirugia = cirugiaAsociada.optString("fecha_cirugia", "No disponible");

                    // Obtener el objeto tipo_cirugia
                    JSONObject tipoCirugiaObj = cirugiaAsociada.optJSONObject("tipo_cirugia");

                    // Obtener el nombre directamente del objeto tipo_cirugia
                    tipoCirugia = tipoCirugiaObj != null
                            ? tipoCirugiaObj.optString("nombre", "No disponible")
                            : "No disponible";
                }

                // Añadir datos a la tabla
                String nombreMascota = mascotaObj.optString("nombre", "N/A");
                model.addRow(new Object[]{
                        fichamedicaId,
                        fechaMedica,
                        proxConsulta,
                        nombreMascota,
                        tipoAlimentoDescripcion,
                        confirmacionChip,
                        fechaColocacion,
                        lugarColocacion,
                        confirmacionEsterilizacion,
                        fechaEsterilizacion,
                        lugarEsterilizacion,
                        confirmacionDesparasitacion,
                        fechaDesparasitacion,
                        veterinariaNombre,
                        veterinariaDescrip,
                        descripcionVacuna,
                        fechaVacuna,
                        descripcionCirugia,
                        fechaCirugia,
                        tipoCirugia
                });
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al cargar datos de las APIs.");
    }
}


// Método para obtener datos de la API
private JSONArray obtenerDatosDeApi(String urlString) throws IOException, JSONException {
    URL url = new URL(urlString);
    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
    connection.setRequestMethod("GET");
    connection.setRequestProperty("Authorization", "Token " + token);
    //connection.setRequestProperty("Authorization", "Token " + token2);
    connection.connect();

    int responseCode = connection.getResponseCode();
    if (responseCode == HttpURLConnection.HTTP_OK) {
        BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        StringBuilder response = new StringBuilder();
        String inputLine;
        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
        }
        in.close();
        return new JSONArray(response.toString());
    } else {
        throw new IOException("Error en la conexión. Código de respuesta: " + responseCode);
    }
}

//------------------------------------------------------FIN LISTAR DATOS FICHA MEDICA-------------------------------------------------------------------
    
//------------------------------------------------------INICIO MODIFICAR  FICHA MEDICA-------------------------------------------------------------------


private void modificarFichaMedica(int fichaMedicaId) {
    String urlString = "http://127.0.0.1:8000/ficha_medica/" + fichaMedicaId + "/"; // URL de la API para modificar datos de la ficha médica
    HttpURLConnection connection = null;

    try {
        // 1. Obtener los datos actuales de la ficha médica
        URL getUrl = new URL(urlString);
        HttpURLConnection getConnection = (HttpURLConnection) getUrl.openConnection();
        getConnection.setRequestMethod("GET");
        getConnection.setRequestProperty("Authorization", "Token " + token);
        getConnection.setRequestProperty("Accept", "application/json");
        getConnection.connect();

        int getResponseCode = getConnection.getResponseCode();
        if (getResponseCode != HttpURLConnection.HTTP_OK) {
            JOptionPane.showMessageDialog(null, 
                "Error al obtener los datos actuales de la ficha médica. Código de respuesta: " + getResponseCode, 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        BufferedReader reader = new BufferedReader(new InputStreamReader(getConnection.getInputStream(), "utf-8"));
        StringBuilder currentDataBuilder = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            currentDataBuilder.append(line.trim());
        }
        reader.close();

        JSONObject currentData = new JSONObject(currentDataBuilder.toString());
        getConnection.disconnect();

        // 2. Crear el objeto JSON con los datos nuevos de la ficha médica
        String proxConsultaText = txtProximaConsulta.getText(); // Campo para la próxima consulta
        String fechaMedicaText = txtFechaMedica.getText(); // Campo para la fecha médica

        // Validar formato de fechas y lógica de negocio
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date proxConsultaDate = dateFormat.parse(proxConsultaText);
        Date fechaMedicaDate = dateFormat.parse(fechaMedicaText);

        if (proxConsultaDate.before(fechaMedicaDate)) {
            JOptionPane.showMessageDialog(null, 
                "La fecha de la próxima consulta no puede ser menor que la fecha médica.", 
                "Error de validación", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        JSONObject jsonData = new JSONObject();
        jsonData.put("prox_consulta", proxConsultaText);
        jsonData.put("fecha_medica", fechaMedicaText);

        // 3. Validar si al menos un campo ha cambiado
        boolean hasChanges = false;
        if (!proxConsultaText.equals(currentData.getString("prox_consulta")) ||
            !fechaMedicaText.equals(currentData.getString("fecha_medica"))) {
            hasChanges = true;
        }

        if (!hasChanges) {
            JOptionPane.showMessageDialog(null, 
                "No se realizaron cambios. Al menos un campo debe modificarse.", 
                "Advertencia", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        // 4. Realizar la solicitud PUT
        URL url = new URL(urlString);
        connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("PUT");
        connection.setRequestProperty("Authorization", "Token " + token);
        connection.setRequestProperty("Content-Type", "application/json; utf-8");
        connection.setRequestProperty("Accept", "application/json");
        connection.setDoOutput(true);

        try (OutputStream os = connection.getOutputStream()) {
            byte[] input = jsonData.toString().getBytes("utf-8");
            os.write(input, 0, input.length);
        }

        // 5. Leer la respuesta de la API
        int responseCode = connection.getResponseCode();
        if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_NO_CONTENT) {
            JOptionPane.showMessageDialog(null, 
                "Ficha médica modificada con éxito.", 
                "Éxito", 
                JOptionPane.INFORMATION_MESSAGE);
            cargarDatosTabla();
        } else {
            BufferedReader errorReader = new BufferedReader(new InputStreamReader(connection.getErrorStream(), "utf-8"));
            StringBuilder errorResponse = new StringBuilder();
            while ((line = errorReader.readLine()) != null) {
                errorResponse.append(line.trim());
            }
            JOptionPane.showMessageDialog(null, 
                "Error al modificar la ficha médica. Código de respuesta: " + responseCode + "\nDetalles del error: " + errorResponse.toString(), 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, 
            "Ocurrió un error", 
            "Error", 
            JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    } finally {
        if (connection != null) {
            connection.disconnect();
        }
    }
}


private void manejarModificacionFichaMedica() {
    int filaSeleccionada = TablaFichaMedica.getSelectedRow();

    if (filaSeleccionada != -1) {
        int fichaMedicaId = (int) TablaFichaMedica.getValueAt(filaSeleccionada, 0);

        int confirmacion = JOptionPane.showConfirmDialog(null,
            "¿Está seguro de que desea modificar los datos de esta ficha médica?",
            "Confirmar modificación",
            JOptionPane.YES_NO_OPTION);

        if (confirmacion == JOptionPane.YES_OPTION) {
            modificarFichaMedica(fichaMedicaId);
        }
    } else {
        JOptionPane.showMessageDialog(null, "Por favor, seleccione una ficha médica de la tabla.");
    }
}




//------------------------------------------------------FIN MODIFICAR  FICHA MEDICA-------------------------------------------------------------------



//------------------------------------------------------INICIO ELIMINAR FICHA MEDICA----------------------------------------------------------------------------


// Método para eliminar una ficha médica a través de la API
private void eliminarFichaMedica(int fichaMedicaId) {
    String urlString = "http://127.0.0.1:8000/api/fichamedica/" + fichaMedicaId + "/"; // URL de la API para eliminar la ficha médica

    try {
        // Crear la URL y la conexión
        URL url = new URL(urlString);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();

        // Configurar el método DELETE y los encabezados
        connection.setRequestMethod("DELETE");  // Cambiar a DELETE para eliminar
        connection.setRequestProperty("Authorization", "Token " + token);  // Token de autenticación
        //connection.setRequestProperty("Authorization", "Token " + token2);
        connection.setRequestProperty("Accept", "application/json");

        // Conectar y obtener la respuesta
        connection.connect();
        int responseCode = connection.getResponseCode();
        if (responseCode == HttpURLConnection.HTTP_NO_CONTENT) {
            JOptionPane.showMessageDialog(null, "Ficha médica eliminada correctamente.");
            // Aquí puedes actualizar la tabla o hacer otras acciones
        } else {
            JOptionPane.showMessageDialog(null, "Error al eliminar la ficha médica. Código de respuesta: " + responseCode);
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al eliminar la ficha médica.");
    }
}

// Método común para manejar la eliminación de una ficha médica
private void manejarEliminacionFichaMedica() {
    // Obtener la fila seleccionada
    int filaSeleccionada = TablaFichaMedica.getSelectedRow();  // Cambiar TablaFichasMedicas por el nombre de la tabla donde se listan las fichas médicas

    if (filaSeleccionada != -1) {
        // Obtener el ID de la ficha médica en la primera columna (suponiendo que el ID está en la columna 0)
        int fichaMedicaId = (int) TablaFichaMedica.getValueAt(filaSeleccionada, 0);

        // Mostrar un cuadro de confirmación para eliminar la ficha médica
        int confirmacion = JOptionPane.showConfirmDialog(null, 
            "¿Está seguro de que desea eliminar esta ficha médica?", 
            "Confirmar eliminación", 
            JOptionPane.YES_NO_OPTION);

        if (confirmacion == JOptionPane.YES_OPTION) {
            eliminarFichaMedica(fichaMedicaId); // Llamar al método de eliminación
            cargarDatosTabla();  // Recargar la tabla para reflejar la eliminación
        }
    } else {
        JOptionPane.showMessageDialog(null, "Por favor, seleccione una ficha médica de la tabla.");
    }
}





//------------------------------------------------------FIN ELIMINAR FICHA MEDICA----------------------------------------------------------------------------








//--------------------------------------------------INICIO SELECCIONAR FICHA MEDICA------------------------------------------------------
    
private void seleccionarFichaMedica(int fichaMedicaId) {
    String urlString = "http://127.0.0.1:8000/api/fichamedica/" + fichaMedicaId + "/"; // URL de la API para obtener datos

    try {
        // Crear la URL y la conexión
        URL url = new URL(urlString);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();

        // Configurar el método GET y los encabezados
        connection.setRequestMethod("GET");
        connection.setRequestProperty("Authorization", "Token " + token);  // Token de autenticación
        //connection.setRequestProperty("Authorization", "Token " + token2);
        connection.setRequestProperty("Accept", "application/json");

        // Conectar y obtener la respuesta
        connection.connect();
        int responseCode = connection.getResponseCode();

        if (responseCode == HttpURLConnection.HTTP_OK) {
            // Leer la respuesta de la API
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder response = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                response.append(line);
            }

            // Convertir la respuesta en un JSONObject
            JSONObject jsonResponse = new JSONObject(response.toString());

            // Obtener los datos de la ficha médica
            String proximaConsulta = jsonResponse.optString("prox_consulta", "N/A");
            String fechaMedica = jsonResponse.optString("fecha_medica", "N/A");

            // Mostrar los datos en los campos correspondientes
            txtProximaConsulta.setText(proximaConsulta);
            txtFechaMedica.setText(fechaMedica);

        } else {
            JOptionPane.showMessageDialog(null, "Error al obtener datos de la ficha médica.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al seleccionar ficha médica.");
    }
}


private void manejarSeleccionFichaMedica() {
    // Obtener la fila seleccionada
    int filaSeleccionada = TablaFichaMedica.getSelectedRow();

    if (filaSeleccionada != -1) {
        // Obtener el ID de la ficha médica en la primera columna (suponiendo que el ID está en la columna 0)
        int fichaMedicaId = (int) TablaFichaMedica.getValueAt(filaSeleccionada, 0);

        // Confirmación de selección
        int confirmacion = JOptionPane.showConfirmDialog(null,
            "¿Está seguro de que desea cargar los datos de esta ficha médica?",
            "Confirmar selección",
            JOptionPane.YES_NO_OPTION);

        if (confirmacion == JOptionPane.YES_OPTION) {
            seleccionarFichaMedica(fichaMedicaId); // Llamar al método para cargar los datos
        }
    } else {
        JOptionPane.showMessageDialog(null, "Por favor, seleccione una ficha médica de la tabla.");
    }
}

//--------------------------------------------------FIN SELECCIONAR FICHA MEDICA------------------------------------------------------


    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ficha_Medica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ficha_Medica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ficha_Medica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ficha_Medica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ficha_Medica().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTEliminarPA;
    private javax.swing.JButton BTModificarPA;
    private javax.swing.JButton BTSeleccionarFicha;
    private javax.swing.JButton BTVolver;
    private javax.swing.JTable TablaFichaMedica;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField txtFechaMedica;
    private javax.swing.JTextField txtProximaConsulta;
    private javax.swing.JLabel txtUsuario;
    // End of variables declaration//GEN-END:variables
}
